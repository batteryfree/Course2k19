{"ast":null,"code":"function getRundomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateMines(sizeMinefieldX, sizeMinefieldY, mines) {\n  const sizeMinefield = sizeMinefieldX * sizeMinefieldY - 1;\n  let numOfMine = mines;\n  const mineField = [];\n\n  for (let y = 0; y < sizeMinefieldY; y++) {\n    mineField[y] = [];\n\n    for (let x = 0; x < sizeMinefieldX; x++) {\n      mineField[y][x] = 0;\n    }\n  }\n\n  while (numOfMine !== 0) {\n    const mine = getRundomNumber(0, sizeMinefield);\n    const mineY = Math.trunc(mine / sizeMinefieldX);\n    const mineX = mine - mineY * sizeMinefieldX;\n\n    if (mineField[mineY][mineX] !== -1) {\n      mineField[mineY][mineX]--;\n      numOfMine--;\n    }\n  }\n\n  return mineField;\n}\n\nfunction setMineCntainer(mineField, sizeMinefieldX, sizeMinefieldY) {\n  const arr = mineField;\n\n  for (let y = 0; y < sizeMinefieldY; y++) {\n    for (let x = 0; x < sizeMinefieldX; x++) {\n      if (arr[y][x] !== -1) {\n        if (arr[y][x + 1] === -1) arr[y][x]++;\n        if (arr[y][x - 1] === -1) arr[y][x]++;\n\n        if (y !== 0) {\n          if (arr[y - 1][x] === -1) arr[y][x]++;\n          if (arr[y - 1][x - 1] === -1) arr[y][x]++;\n          if (arr[y - 1][x + 1] === -1) arr[y][x]++;\n        }\n\n        if (y !== sizeMinefieldY - 1) {\n          if (arr[y + 1][x] === -1) arr[y][x]++;\n          if (arr[y + 1][x - 1] === -1) arr[y][x]++;\n          if (arr[y + 1][x + 1] === -1) arr[y][x]++;\n        }\n      }\n    }\n  }\n\n  return arr;\n}\n\nfunction generateField(sizeMineFieldX, sizeMineFieldY, mines) {\n  const mineField = generateMines(sizeMineFieldX, sizeMineFieldY, mines);\n  return setMineCntainer(mineField, sizeMineFieldX, sizeMineFieldY);\n}\n\nexport default function generateFieldMine(sizeMineFieldX, sizeMineFieldY, mines) {\n  const mineField = generateField(sizeMineFieldX, sizeMineFieldY, mines);\n  return mineField.map(row => row.map(cell => {\n    let caption = cell;\n    if (caption === 0) caption = '\\u00A0';\n    if (caption === -1) caption = '*';\n    return {\n      cap: caption,\n      disabled: false,\n      lock: false,\n      children: '\\u00A0'\n    };\n  }));\n}","map":{"version":3,"sources":["/home/batteryfree/HW-5/src/generator-field-min.js"],"names":["getRundomNumber","min","max","Math","floor","random","generateMines","sizeMinefieldX","sizeMinefieldY","mines","sizeMinefield","numOfMine","mineField","y","x","mine","mineY","trunc","mineX","setMineCntainer","arr","generateField","sizeMineFieldX","sizeMineFieldY","generateFieldMine","map","row","cell","caption","cap","disabled","lock","children"],"mappings":"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","sourcesContent":["function getRundomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateMines(sizeMinefieldX, sizeMinefieldY, mines) {\n    const sizeMinefield = (sizeMinefieldX * sizeMinefieldY) - 1;\n    let numOfMine = mines;\n    const mineField = [];\n\n    for (let y = 0; y < sizeMinefieldY; y++) {\n        mineField[y] = [];\n        for (let x = 0; x < sizeMinefieldX; x++) {\n            mineField[y][x] = 0;\n        }\n    }\n\n    while (numOfMine !== 0) {\n        const mine = getRundomNumber(0, sizeMinefield);\n        const mineY = Math.trunc(mine / sizeMinefieldX);\n        const mineX = mine - mineY * sizeMinefieldX;\n        if (mineField[mineY][mineX] !== -1) {\n            mineField[mineY][mineX]--;\n            numOfMine--;\n        }\n    }\n    return mineField;\n}\n\nfunction setMineCntainer(mineField, sizeMinefieldX, sizeMinefieldY) {\n    const arr = mineField;\n    for (let y = 0; y < sizeMinefieldY; y++) {\n        for (let x = 0; x < sizeMinefieldX; x++) {\n            if (arr[y][x] !== -1) {\n                if (arr[y][x + 1] === -1) arr[y][x]++;\n                if (arr[y][x - 1] === -1) arr[y][x]++;\n                if (y !== 0) {\n                    if (arr[y - 1][x] === -1) arr[y][x]++;\n                    if (arr[y - 1][x - 1] === -1) arr[y][x]++;\n                    if (arr[y - 1][x + 1] === -1) arr[y][x]++;\n                }\n                if (y !== sizeMinefieldY - 1) {\n                    if (arr[y + 1][x] === -1) arr[y][x]++;\n                    if (arr[y + 1][x - 1] === -1) arr[y][x]++;\n                    if (arr[y + 1][x + 1] === -1) arr[y][x]++;\n                }\n            }\n        }\n    }\n    return arr;\n}\n\nfunction generateField(sizeMineFieldX, sizeMineFieldY, mines) {\n    const mineField = generateMines(sizeMineFieldX, sizeMineFieldY, mines);\n    return setMineCntainer(mineField, sizeMineFieldX, sizeMineFieldY);\n}\n\nexport default function generateFieldMine(sizeMineFieldX, sizeMineFieldY, mines) {\n    const mineField = generateField(sizeMineFieldX, sizeMineFieldY, mines);\n\n    return mineField.map((row) => row.map((cell) => {\n        let caption = cell;\n        if (caption === 0) caption = '\\u00A0';\n        if (caption === -1) caption = '*';\n        return {\n            cap: caption,\n            disabled: false,\n            lock: false,\n            children: '\\u00A0',\n        };\n    }));\n}\n"]},"metadata":{},"sourceType":"module"}