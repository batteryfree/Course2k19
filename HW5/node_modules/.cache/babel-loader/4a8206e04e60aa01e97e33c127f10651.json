{"ast":null,"code":"function generateField(sizeMineFieldX, sizeMineFieldY, mines) {\n  let mineField = generateMines(sizeMineFieldX, sizeMineFieldY, mines);\n  return setMineCntainer(mineField, sizeMineFieldX, sizeMineFieldY);\n}\n\nfunction generateMines(sizeMinefieldX, sizeMinefieldY, mines) {\n  let sizeMinefield = sizeMinefieldX * sizeMinefieldY - 1;\n  let numOfMine = mines;\n  let mineField = [];\n\n  for (let y = 0; y < sizeMinefieldY; y++) {\n    mineField[y] = [];\n\n    for (let x = 0; x < sizeMinefieldX; x++) {\n      mineField[y][x] = 0;\n    }\n  }\n\n  while (numOfMine !== 0) {\n    let mine = getRundomNumber(0, sizeMinefield);\n    let mineY;\n    mineY = Math.trunc(mine / sizeMinefieldX);\n    let mineX = mine - mineY * sizeMinefieldX;\n\n    if (mineField[mineY][mineX] !== -1) {\n      mineField[mineY][mineX]--;\n      numOfMine--;\n    }\n  }\n\n  return mineField;\n}\n\nfunction getRundomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction setMineCntainer(mineField, sizeMinefieldX, sizeMinefieldY) {\n  for (let y = 0; y < sizeMinefieldY; y++) {\n    for (let x = 0; x < sizeMinefieldX; x++) {\n      if (mineField[y][x] !== -1) {\n        if (mineField[y][x + 1] === -1) mineField[y][x]++;\n        if (mineField[y][x - 1] === -1) mineField[y][x]++;\n\n        if (y !== 0) {\n          if (mineField[y - 1][x] === -1) mineField[y][x]++;\n          if (mineField[y - 1][x - 1] === -1) mineField[y][x]++;\n          if (mineField[y - 1][x + 1] === -1) mineField[y][x]++;\n        }\n\n        if (y !== sizeMinefieldY - 1) {\n          if (mineField[y + 1][x] === -1) mineField[y][x]++;\n          if (mineField[y + 1][x - 1] === -1) mineField[y][x]++;\n          if (mineField[y + 1][x + 1] === -1) mineField[y][x]++;\n        }\n      }\n    }\n  }\n\n  return mineField;\n}\n\nexport default function generateFieldMine(sizeMineFieldX, sizeMineFieldY, mines) {\n  let mineField = generateField(sizeMineFieldX, sizeMineFieldY, mines);\n  return mineField.map(row => {\n    return row.map(cell => {\n      let caption = cell;\n      if (caption === 0) caption = '\\u00A0';\n      if (caption === -1) caption = '*';\n      return {\n        cap: caption,\n        disabled: false,\n        lock: false,\n        children: '\\u00A0'\n      };\n    });\n  });\n}","map":{"version":3,"sources":["/home/batteryfree/111/frontend-course-2019/homeworks/roman.vlasov_batteryfree/homework_5/src/generator-field-min.js"],"names":["generateField","sizeMineFieldX","sizeMineFieldY","mines","mineField","generateMines","setMineCntainer","sizeMinefieldX","sizeMinefieldY","sizeMinefield","numOfMine","y","x","mine","getRundomNumber","mineY","Math","trunc","mineX","min","max","floor","random","generateFieldMine","map","row","cell","caption","cap","disabled","lock","children"],"mappings":"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","sourcesContent":["function generateField(sizeMineFieldX, sizeMineFieldY, mines) {\n    let mineField = generateMines(sizeMineFieldX, sizeMineFieldY, mines);\n    return setMineCntainer(mineField, sizeMineFieldX, sizeMineFieldY);\n}\n\nfunction generateMines(sizeMinefieldX, sizeMinefieldY, mines) {\n    let sizeMinefield = (sizeMinefieldX * sizeMinefieldY) - 1;\n    let numOfMine = mines;\n    let mineField = [];\n\n    for(let y = 0; y < sizeMinefieldY; y++) {\n        mineField[y] = [];\n        for (let x = 0; x < sizeMinefieldX; x++) {\n            mineField[y][x] = 0;\n        }\n    }\n\n    while (numOfMine !== 0) {\n        let mine = getRundomNumber(0, sizeMinefield);\n        let mineY;\n        mineY =  Math.trunc(mine / sizeMinefieldX);\n        let mineX = mine - mineY * sizeMinefieldX;\n        if (mineField[mineY][mineX] !== -1) {\n            mineField[mineY][mineX]--;\n            numOfMine--;\n        }\n    }\n    return mineField;\n}\n\nfunction getRundomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction setMineCntainer(mineField, sizeMinefieldX, sizeMinefieldY) {\n    for(let y = 0; y < sizeMinefieldY; y++) {\n        for(let x = 0; x < sizeMinefieldX; x++) {\n            if(mineField[y][x] !== -1) {\n                if(mineField[y][x + 1] === -1) mineField[y][x]++;\n                if(mineField[y][x - 1] === -1) mineField[y][x]++;\n                if (y !== 0) {\n                    if(mineField[y - 1][x] === -1) mineField[y][x]++;\n                    if(mineField[y - 1][x - 1] === -1) mineField[y][x]++;\n                    if(mineField[y - 1][x + 1] === -1) mineField[y][x]++;\n                }\n                if (y !== sizeMinefieldY - 1) {\n                    if(mineField[y + 1][x] === -1) mineField[y][x]++;\n                    if(mineField[y + 1][x - 1] === -1) mineField[y][x]++;\n                    if(mineField[y + 1][x + 1] === -1) mineField[y][x]++;\n                }\n            }\n        }\n    }\n    return mineField;\n}\n\nexport default function generateFieldMine (sizeMineFieldX, sizeMineFieldY, mines) {\n    let mineField = generateField(sizeMineFieldX, sizeMineFieldY, mines);\n\n    return mineField.map(row => {\n        return row.map(cell => {\n            let caption = cell;\n            if(caption === 0) caption = '\\u00A0';\n            if(caption === -1) caption = '*'\n            return {\n                        cap: caption,\n                        disabled: false,\n                        lock: false,\n                        children: '\\u00A0'\n                    }\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}