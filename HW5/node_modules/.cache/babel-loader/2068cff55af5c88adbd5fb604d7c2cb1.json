{"ast":null,"code":"var _jsxFileName = \"/home/batteryfree/HW-5/src/Field.js\";\nimport React from 'react';\nimport Button from './Button';\nimport generatorField from './generator-field-min';\nimport emptyCell from './empty-cell';\nimport Setings from './Setings';\nexport default class FieldMine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = (row, col) => {\n      if (this.mineFieldArr[row][col].lock) return;\n      emptyCell(this.mineFieldArr, row, col, this.row, this.col);\n      let openCell = 0;\n      this.mineFieldArr.forEach(element => {\n        element.forEach(cell => {\n          if (cell.disabled) openCell++;\n        });\n      });\n\n      if (this.mineFieldArr[row][col].cap === '*') {\n        openCell = 0;\n        this.mineFieldArr.forEach(element => {\n          element.forEach(cell => {\n            cell.disabled = true;\n            cell.children = cell.cap;\n          });\n        });\n        alert('YOU LOSE!!!');\n      }\n\n      if (openCell === this.row * this.col - this.mines) {\n        this.mineFieldArr.forEach(element => {\n          element.forEach(cell => {\n            cell.disabled = true;\n          });\n        });\n        alert('YOUR WON!!!');\n      }\n\n      this.setState({\n        mineField: this.mineFieldArr\n      });\n    };\n\n    this.handleClickR = (row, col) => {\n      if (this.mineFieldArr[row][col].lock) {\n        this.mineFieldArr[row][col].lock = false;\n        this.mineFieldArr[row][col].children = '\\u00A0';\n      } else {\n        this.mineFieldArr[row][col].lock = true;\n        this.mineFieldArr[row][col].children = 'M';\n      }\n\n      this.setState({\n        mineField: this.mineFieldArr\n      });\n    };\n\n    this.reStart = () => {\n      if (this.mines > this.row * this.col) {\n        this.mines = this.row * this.col;\n      }\n\n      this.mineFieldArr = generatorField(this.col, this.row, this.mines);\n      this.setState({\n        maxMine: this.row * this.col,\n        mineField: this.mineFieldArr\n      });\n    };\n\n    this.handleChangeRow = value => {\n      this.row = parseInt(value, 10);\n      this.reStart();\n    };\n\n    this.handleChangeCol = value => {\n      this.col = parseInt(value, 10);\n      this.reStart();\n    };\n\n    this.handleChangeMine = value => {\n      this.mines = parseInt(value, 10);\n      this.reStart();\n    };\n\n    this.row = 6;\n    this.col = 6;\n    this.mines = 5;\n    this.mineFieldArr = generatorField(this.col, this.row, this.mines);\n    this.state = {\n      mineField: this.mineFieldArr,\n      maxMine: 36\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Setings, {\n      handleChangeRow: this.handleChangeRow,\n      handleChangeMine: this.handleChangeMine,\n      handleChangeCol: this.handleChangeCol,\n      min: 6,\n      max: 16,\n      maxMine: this.state.maxMine,\n      handleClick: this.reStart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), this.mineFieldArr.map((row, indexY) => React.createElement(\"div\", {\n      key: indexY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, row.map((cell, indexX) => {\n      return React.createElement(Button, {\n        key: indexX,\n        row: indexY,\n        col: indexX,\n        colorText: this.state.mineField[indexY][indexX].children,\n        children: this.state.mineField[indexY][indexX].children,\n        disabled: this.state.mineField[indexY][indexX].disabled,\n        onClick: this.handleClick,\n        handleClickR: this.handleClickR,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      });\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/home/batteryfree/HW-5/src/Field.js"],"names":["React","Button","generatorField","emptyCell","Setings","FieldMine","Component","constructor","props","handleClick","row","col","mineFieldArr","lock","openCell","forEach","element","cell","disabled","cap","children","alert","mines","setState","mineField","handleClickR","reStart","maxMine","handleChangeRow","value","parseInt","handleChangeCol","handleChangeMine","state","render","map","indexY","indexX"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from './Button';\nimport generatorField from './generator-field-min';\nimport emptyCell from './empty-cell';\nimport Setings from './Setings';\n\nexport default class FieldMine extends React.Component  {\n    constructor(props) {\n        super(props);\n        this.row = 6;\n        this.col = 6;\n        this.mines = 5;\n        this.mineFieldArr = generatorField(this.col, this.row, this.mines);\n        this.state = ({\n            mineField: this.mineFieldArr,\n            maxMine: 36,\n        });\n    }\n\n    handleClick = (row, col) => {\n        if (this.mineFieldArr[row][col].lock) return;\n\n        emptyCell(this.mineFieldArr, row, col, this.row, this.col);\n\n        let openCell = 0;\n\n        this.mineFieldArr.forEach((element) => {\n            element.forEach((cell) => {\n                if (cell.disabled) openCell++;\n            });\n        });\n\n        if (this.mineFieldArr[row][col].cap === '*') {\n            openCell = 0;\n            this.mineFieldArr.forEach((element) => {\n                element.forEach((cell) => {\n                    cell.disabled = true;\n                    cell.children = cell.cap;\n                });\n            });\n            alert('YOU LOSE!!!');\n        }\n    \n\n        if (openCell === (this.row * this.col - this.mines)) {\n            this.mineFieldArr.forEach((element) => {\n                element.forEach((cell) => {\n                    cell.disabled = true;\n                })\n            })\n            alert('YOUR WON!!!');\n        }\n\n        this.setState({\n            mineField: this.mineFieldArr,\n        })\n    }\n\n    handleClickR = (row, col) => {\n        if (this.mineFieldArr[row][col].lock) {\n            this.mineFieldArr[row][col].lock = false;\n            this.mineFieldArr[row][col].children = '\\u00A0';\n        } else {\n            this.mineFieldArr[row][col].lock = true;\n            this.mineFieldArr[row][col].children = 'M';\n        }\n\n        this.setState({\n            mineField: this.mineFieldArr,\n        });\n    }\n\n\n    reStart = () => {\n        if (this.mines > this.row * this.col) {\n            this.mines = this.row * this.col;\n        }\n        this.mineFieldArr = generatorField(this.col, this.row, this.mines);\n        this.setState({\n            maxMine: this.row * this.col,\n            mineField: this.mineFieldArr,\n        });\n    }\n\n    handleChangeRow = (value) => {\n        this.row = parseInt(value, 10);\n        this.reStart();\n    }\n\n    handleChangeCol = (value) => {\n        this.col = parseInt(value, 10);\n        this.reStart();\n    }\n\n    handleChangeMine = (value) => {\n        this.mines = parseInt(value, 10);\n        this.reStart();\n    }\n\n    render () {\n        return (\n            <div>\n                <Setings\n                    handleChangeRow={this.handleChangeRow}\n                    handleChangeMine = {this.handleChangeMine}\n                    handleChangeCol = {this.handleChangeCol}\n                    min={6}\n                    max={16}\n                    maxMine={this.state.maxMine}\n                    handleClick = {this.reStart}\n                ></Setings>\n                {\n                    this.mineFieldArr.map((row, indexY) => (\n                        <div key={indexY}>{\n                            row.map((cell, indexX) => {\n                                return(\n                                    <Button\n                                        key={indexX}\n                                        row={indexY}\n                                        col={indexX}\n                                        colorText={this.state.mineField[indexY][indexX].children}\n                                        children={this.state.mineField[indexY][indexX].children}\n                                        disabled={this.state.mineField[indexY][indexX].disabled}\n                                        onClick={this.handleClick}\n                                        handleClickR={this.handleClickR}\n                                    ></Button>\n                                );\n                            })\n                        }</div>\n                    ))\n                }</div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}