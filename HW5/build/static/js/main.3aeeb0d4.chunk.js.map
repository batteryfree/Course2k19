{"version":3,"sources":["Button.js","generator-field-min.js","Setings.js","Field.js","empty-cell.js","serviceWorker.js","index.js","App.js"],"names":["Button","handleClick","props","onClick","row","col","handleClickR","event","preventDefault","className","color-text","this","colorText","type","disabled","onContextMenu","children","React","Component","generateField","sizeMineFieldX","sizeMineFieldY","mines","mineField","sizeMinefieldX","sizeMinefieldY","arr","y","x","setMineCntainer","min","max","sizeMinefield","numOfMine","mine","Math","floor","random","mineY","trunc","mineX","generateMines","generateFieldMine","map","cell","caption","cap","lock","Setings","handleChangeRow","target","value","handleChangeCol","handleChangeMine","defaultValue","onChange","maxMine","FieldMine","mineFieldArr","emptyCell","sizeY","sizeX","openCell","forEach","element","alert","setState","reStart","generatorField","parseInt","state","indexY","key","indexX","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3aeeb0d4.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends React.Component {\n    // eslint-disable-next-line no-param-reassign\n    handleClick = () => {\n        this.props.onClick(this.props.row, this.props.col);\n    }\n\n    handleClickR = (event) => {\n        this.props.handleClickR(this.props.row, this.props.col);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <button className=\"button\"\n                color-text={this.props.colorText}\n                type=\"button\"\n                disabled={this.props.disabled}\n                onClick={this.handleClick}\n                onContextMenu={this.handleClickR}\n            >{this.props.children}</button>\n        );\n    }\n}\n\nButton.propTypes = {\n    colorText: PropTypes.string,\n    disabled: PropTypes.bool,\n    children: PropTypes.node,\n    handleClick: PropTypes.func,\n    onContextMenu: PropTypes.func,\n    onClick: PropTypes.func,\n    handleClickR: PropTypes.func,\n    row: PropTypes.number,\n    col: PropTypes.number,\n};\n","function getRundomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateMines(sizeMinefieldX, sizeMinefieldY, mines) {\n    const sizeMinefield = (sizeMinefieldX * sizeMinefieldY) - 1;\n    let numOfMine = mines;\n    const mineField = [];\n\n    for (let y = 0; y < sizeMinefieldY; y++) {\n        mineField[y] = [];\n        for (let x = 0; x < sizeMinefieldX; x++) {\n            mineField[y][x] = 0;\n        }\n    }\n\n    while (numOfMine !== 0) {\n        const mine = getRundomNumber(0, sizeMinefield);\n        const mineY = Math.trunc(mine / sizeMinefieldX);\n        const mineX = mine - mineY * sizeMinefieldX;\n        if (mineField[mineY][mineX] !== -1) {\n            mineField[mineY][mineX]--;\n            numOfMine--;\n        }\n    }\n    return mineField;\n}\n\nfunction setMineCntainer(mineField, sizeMinefieldX, sizeMinefieldY) {\n    const arr = mineField;\n    for (let y = 0; y < sizeMinefieldY; y++) {\n        for (let x = 0; x < sizeMinefieldX; x++) {\n            if (arr[y][x] !== -1) {\n                if (arr[y][x + 1] === -1) arr[y][x]++;\n                if (arr[y][x - 1] === -1) arr[y][x]++;\n                if (y !== 0) {\n                    if (arr[y - 1][x] === -1) arr[y][x]++;\n                    if (arr[y - 1][x - 1] === -1) arr[y][x]++;\n                    if (arr[y - 1][x + 1] === -1) arr[y][x]++;\n                }\n                if (y !== sizeMinefieldY - 1) {\n                    if (arr[y + 1][x] === -1) arr[y][x]++;\n                    if (arr[y + 1][x - 1] === -1) arr[y][x]++;\n                    if (arr[y + 1][x + 1] === -1) arr[y][x]++;\n                }\n            }\n        }\n    }\n    return arr;\n}\n\nfunction generateField(sizeMineFieldX, sizeMineFieldY, mines) {\n    const mineField = generateMines(sizeMineFieldX, sizeMineFieldY, mines);\n    return setMineCntainer(mineField, sizeMineFieldX, sizeMineFieldY);\n}\n\nexport default function generateFieldMine(sizeMineFieldX, sizeMineFieldY, mines) {\n    const mineField = generateField(sizeMineFieldX, sizeMineFieldY, mines);\n\n    return mineField.map((row) => row.map((cell) => {\n        let caption = cell;\n        if (caption === 0) caption = '\\u00A0';\n        if (caption === -1) caption = '*';\n        return {\n            cap: caption,\n            disabled: false,\n            lock: false,\n            children: '\\u00A0',\n        };\n    }));\n}\n","import React from 'react';\nimport './Setings.css';\nimport PropTypes from 'prop-types';\n\nexport default class Setings extends React.Component {\n\n    handleChangeRow = (event) => {\n        this.props.handleChangeRow(event.target.value);\n    }\n\n    handleChangeCol = (event) => {\n        this.props.handleChangeCol(event.target.value);\n    }\n\n    handleChangeMine = (event) => {\n        this.props.handleChangeMine(event.target.value);\n    }   \n\n    handleClick = () => {\n        this.props.handleClick();\n    }\n\n    render() {\n        return (\n            <div className=\"setings\">\n                <input\n                    className=\"slider\"\n                    type=\"range\"\n                    defaultValue={this.props.min}\n                    min={this.props.min}\n                    max={this.props.max}\n                    onChange={this.handleChangeRow}\n                ></input><br/>\n                <input\n                    className=\"slider\"\n                    type=\"range\"\n                    defaultValue={this.props.min}\n                    min={this.props.min}\n                    max={this.props.max}\n                    onChange={this.handleChangeCol}\n                ></input><br/>\n                <input\n                    className=\"slider\"\n                    type=\"range\"\n                    defaultValue={5}\n                    min={1}\n                    max={this.props.maxMine}\n                    onChange={this.handleChangeMine}\n                ></input><br/>\n                <button\n                    onClick={this.handleClick}\n                    className=\"button-reset\"\n                    type=\"button\"\n                >Restart</button>\n            </div>\n        );\n    }\n}\n\nSetings.propTypes = {\n    min: PropTypes.number,\n    max: PropTypes.number,\n    maxMine: PropTypes.number,\n    handleClick: PropTypes.func,\n    onChandleChangeRow: PropTypes.func,\n    handleChangeMine: PropTypes.func,\n    handleChangeCol: PropTypes.func,\n};\n","import React from 'react';\nimport Button from './Button';\nimport generatorField from './generator-field-min';\nimport emptyCell from './empty-cell';\nimport Setings from './Setings';\n\nexport default class FieldMine extends React.Component  {\n    constructor(props) {\n        super(props);\n        this.row = 6;\n        this.col = 6;\n        this.mines = 5;\n        this.mineFieldArr = generatorField(this.col, this.row, this.mines);\n        this.state = ({\n            mineField: this.mineFieldArr,\n            maxMine: 36,\n        });\n    }\n\n    handleClick = (row, col) => {\n        if (this.mineFieldArr[row][col].lock) return;\n\n        emptyCell(this.mineFieldArr, row, col, this.row, this.col);\n\n        let openCell = 0;\n\n        this.mineFieldArr.forEach((element) => {\n            element.forEach((cell) => {\n                if (cell.disabled) openCell++;\n            });\n        });\n\n        if (this.mineFieldArr[row][col].cap === '*') {\n            openCell = 0;\n            this.mineFieldArr.forEach((element) => {\n                element.forEach((cell) => {\n                    cell.disabled = true;\n                    cell.children = cell.cap;\n                });\n            });\n            alert('YOU LOSE!!!');\n        }\n    \n\n        if (openCell === (this.row * this.col - this.mines)) {\n            this.mineFieldArr.forEach((element) => {\n                element.forEach((cell) => {\n                    cell.disabled = true;\n                })\n            })\n            alert('YOUR WON!!!');\n        }\n\n        this.setState({\n            mineField: this.mineFieldArr,\n        })\n    }\n\n    handleClickR = (row, col) => {\n        if (this.mineFieldArr[row][col].lock) {\n            this.mineFieldArr[row][col].lock = false;\n            this.mineFieldArr[row][col].children = '\\u00A0';\n        } else {\n            this.mineFieldArr[row][col].lock = true;\n            this.mineFieldArr[row][col].children = 'M';\n        }\n\n        this.setState({\n            mineField: this.mineFieldArr,\n        });\n    }\n\n\n    reStart = () => {\n        if (this.mines > this.row * this.col) {\n            this.mines = this.row * this.col;\n        }\n        this.mineFieldArr = generatorField(this.col, this.row, this.mines);\n        this.setState({\n            maxMine: this.row * this.col,\n            mineField: this.mineFieldArr,\n        });\n    }\n\n    handleChangeRow = (value) => {\n        this.row = parseInt(value, 10);\n        this.reStart();\n    }\n\n    handleChangeCol = (value) => {\n        this.col = parseInt(value, 10);\n        this.reStart();\n    }\n\n    handleChangeMine = (value) => {\n        this.mines = parseInt(value, 10);\n        this.reStart();\n    }\n\n    render () {\n        return (\n            <div>\n                <Setings\n                    handleChangeRow={this.handleChangeRow}\n                    handleChangeMine = {this.handleChangeMine}\n                    handleChangeCol = {this.handleChangeCol}\n                    min={6}\n                    max={16}\n                    maxMine={this.state.maxMine}\n                    handleClick = {this.reStart}\n                ></Setings>\n                {\n                    this.mineFieldArr.map((row, indexY) => (\n                        <div key={indexY}>{\n                            row.map((cell, indexX) => {\n                                return(\n                                    <Button\n                                        key={indexX}\n                                        row={indexY}\n                                        col={indexX}\n                                        colorText={this.state.mineField[indexY][indexX].children}\n                                        children={this.state.mineField[indexY][indexX].children}\n                                        disabled={this.state.mineField[indexY][indexX].disabled}\n                                        onClick={this.handleClick}\n                                        handleClickR={this.handleClickR}\n                                    ></Button>\n                                );\n                            })\n                        }</div>\n                    ))\n                }</div>\n        );\n    }\n}\n","export default function emptyCell(mineField, row, col, sizeY, sizeX) {\n    if (mineField[row][col].disabled) return;\n    // eslint-disable-next-line no-param-reassign\n    mineField[row][col].children = mineField[row][col].cap;\n    // eslint-disable-next-line no-param-reassign\n    mineField[row][col].disabled = true;\n    if (mineField[row][col].cap !== '\\u00A0') return;\n    if (row > 0) emptyCell(mineField, row - 1, col, sizeY, sizeX);\n    if (row < sizeY - 1) emptyCell(mineField, row + 1, col, sizeY, sizeX);\n    if (col > 0) emptyCell(mineField, row, col - 1, sizeY, sizeX);\n    if (col < sizeX - 1) emptyCell(mineField, row, col + 1, sizeY, sizeX);\n}\n","/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n      // [::1] is the IPv6 localhost address.\n      || window.location.hostname === '[::1]'\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport FieldMine from './Field';\nimport './App.css';\n\n\nexport default function App() {\n    alert('Left click - opens a cell. \\n Right click - blocks a cell from accidental clicking.');\n\n    return (\n        <div className=\"app\">\n            <FieldMine></FieldMine>\n        </div>);\n}\n"],"sourceRoot":""}